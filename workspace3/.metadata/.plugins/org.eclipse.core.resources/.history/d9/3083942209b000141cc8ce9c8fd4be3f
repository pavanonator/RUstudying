import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.json.JSONArray;
import org.json.JSONObject;


public class RetrieveData {
	public static allclassesindept coursejson = new allclassesindept();
	public static allsections coursejson2 = new allsections();
	public static allrooms onBus = new allrooms();
	public allrooms onLiv = new allrooms();
	allrooms onCac = new allrooms();
	allrooms onCd  = new allrooms();
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		JSONArray departments = HttpGet("http://sis.rutgers.edu/soc/subjects.json?semester=12015&campus=NB&level=U");
		JSONObject course = new JSONObject();
		///ArrayList<JSONObject> coursejson = new ArrayList<JSONObject>();
		
		String code="";

		for(int i = 0; i < /*departments.length()*/5; i++){
			System.out.println(i);
			course = departments.getJSONObject(i);
			code = course.getString("code").toString(); //get value of each dept code
			coursejson.courses.add(HttpGet("http://sis.rutgers.edu/soc/courses.json?semester=12015&subject="+code+"&campus=NB&level=U"));		
		}
		
		JSONArray sectionsarray = new JSONArray();
		for(int i=0;i<coursejson.courses.size();i++){
			for(int j=0;j<coursejson.courses.get(i).length();j++){
				for(int k=0;k<coursejson.courses.get(i).getJSONObject(j).getJSONArray("sections").length();k++){
					sectionsarray=coursejson.courses.get(i).getJSONObject(j).getJSONArray("sections").getJSONObject(k).getJSONArray("meetingTimes");
					coursejson2.courses2.add(sectionsarray);
				}
			}
		}
		
		for(int i=0;i<coursejson2.courses2.size();i++){
			for(int j=0;j<coursejson2.courses2.get(i).length();j++){
				organize(
					coursejson2.courses2.get(i).getJSONObject(j).get("campusAbbrev").toString(),
					coursejson2.courses2.get(i).getJSONObject(j).get("buildingCode").toString(),
					coursejson2.courses2.get(i).getJSONObject(j).get("roomNumber").toString(),
					coursejson2.courses2.get(i).getJSONObject(j).get("startTime").toString(),
					coursejson2.courses2.get(i).getJSONObject(j).get("endTime").toString()
				);
			}
		}
		System.out.println(coursejson2.courses2.get(0));
	}
		
	public static void organize(String campus, String building, String roomNumber, String start, String end){
		if(campus=="BUS"){
			onBus.roomll_al=null;
		}
	}
	
	private static JSONArray HttpGet(String url){
		
		try{
			 
			HttpClient client = HttpClientBuilder.create().build();
			HttpGet get = new HttpGet(url);
			
			HttpResponse r = client.execute(get);
		 
			BufferedReader rd = new BufferedReader(new InputStreamReader(r.getEntity().getContent()));
			String line = "";
			String response = "";
			while ((line = rd.readLine()) != null){
				response += line;
			}
			
			JSONArray ret = new JSONArray(response);
			
			return ret;
			
		} catch(Exception e){
			
			System.out.println("exception: " + e);
		}
		
		return null;
	}
	
	public static void initAL(){
		// 
		for(int j=0;j<150;j++){
			JSONArray t=new JSONArray();
			coursejson.courses.add(j,t);
		}
	}
}
	


